{"version":3,"sources":["Login.js","components/Card.js","CardList.js","config.js","Home.js","components/UserPage.js","App.js","serviceWorker.js","index.js"],"names":["cookies","Cookies","Login","state","access_token","user_id","id","this","props","match","params","formData","FormData","append","fetch","method","body","then","res","json","data","console","log","undefined","set","path","setState","catch","err","get","to","pathname","className","href","Component","Card","caption","url","alt","src","CardList","feeds","cardComponent","map","feed","i","key","media_url","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","signOut","e","remove","window","location","replace","Home","writeUserData","Firebase","database","ref","initializeApp","username","urls","usernameurl","alert","mediaUrl","r","rdata","push","onClick","style","float","marginRight","marginTop","UserPage","on","snapshot","forEach","val","App","exact","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a425799d.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Axios from 'axios';\nimport {Redirect} from 'react-router'\nimport Cookies from 'universal-cookie';\n\nimport InstagramLogin from \"react-instagram-oauth\";\nfunction onLogin(){\n  \n}\nconst cookies = new Cookies();\nclass Login extends Component{\n  state={\n    access_token:\"\",\n    user_id:\"\"\n  }\n  \n  componentDidMount(){\n    \n    const id=this.props.match.params.id;\n    // console.log(id)\n    if(id!==\"error\"){\n      const formData=new FormData();\n      formData.append(\"client_id\",\"606162323513468\");\n      formData.append(\"client_secret\",\"3fa0dc9ddd7c97bcca188589ca8699b5\");\n      formData.append(\"code\",id);\n      formData.append(\"grant_type\",\"authorization_code\");\n      formData.append(\"redirect_uri\",\"https://getauthcode.herokuapp.com/\");\n      \n      fetch('https://cors-anywhere.herokuapp.com/https://api.instagram.com/oauth/access_token',{\n        method:'POST',\n        body:formData\n      }).then((res)=>res.json())\n      .then(data=>{\n        console.log(data.access_token);\n        console.log(data.user_id)\n        if(data.access_token===undefined){\n          //Cookie setting stuff  \n          console.log(\"wallah\")        \n        }\n        else{\n          cookies.set('auth',data.access_token,{ path: '/' });\n          cookies.set('user_id',data.user_id,{ path: '/' });\n          this.setState({\n            access_token:data.access_token,\n            user_id:data.user_id\n          })\n        }\n      })\n      .catch((err) => {\n          console.log(err)\n      });\n    }\n\n  }\n  render(){\n    const authHandler = (err, data) => {\n      console.log(err, data);\n    };\n    if(cookies.get('auth')!==undefined){\n      return <Redirect to={{\n        pathname:\"/Home\",\n        state:{\n          access_token:cookies.get('auth'),\n          user_id:cookies.get('user_id')\n        }\n      }}/>\n    }\n    else\n    return(\n      <div >\n        <div className=\"bgimage\">\n        <div className=\"demo\">\n          <div className=\"login\">\n            <div className=\"login__check\"></div>\n            <h1 className=\"quote\">INSTAFEED</h1>\n            <div className=\"insta-default\">\n              <a href=\"https://www.instagram.com/oauth/authorize?app_id=606162323513468&redirect_uri=https://getauthcode.herokuapp.com/&scope=user_profile&response_type=code\" className=\"insta-default\">Log in with Instagram <i className=\"fa fa-instagram\"></i></a>\n            </div>\n            {/* <button className=\"insta-default\" onClick={()=>{window.location.href=''}}>LOGIN</button> */}\n            </div>\n        </div>\n        </div>\n    </div>\n    )\n  }\n}\n\nexport default Login;","import React from 'react'\n\nconst Card=({id,caption,url})=>{\n    return(\n        <div className=\"gallery-item\">\n            <img className=\"gallery-image\" alt='robots' src={url}/>\n            \n        </div>\n    );\n}\n\nexport default Card;","import React from 'react'\nimport Card from './components/Card';\n\nconst CardList=({feeds})=>{\n    const cardComponent=feeds.map((feed,i)=>{\n        return <Card key={i} caption={feeds[i].caption} url={feeds[i].media_url}/>\n    })\n\n    return(\n        <div className=\"gallery\">\n            {cardComponent}\n        </div>\n    )\n}\nexport default CardList;","const config={\n    apiKey: \"AIzaSyBuJLJriIhButPyy23i4m-86hPX0olBSVU\",\n    authDomain: \"socialid-2635e.firebaseapp.com\",\n    databaseURL: \"https://socialid-2635e.firebaseio.com\",\n    projectId: \"socialid-2635e\",\n    storageBucket: \"socialid-2635e.appspot.com\",\n    messagingSenderId: \"351410421087\",\n    appId: \"1:351410421087:web:5af105d130aadb62c88aea\",\n    measurementId: \"G-TSFEHLH89F\"\n}\nexport default config;","import React, { Component } from 'react';\nimport Cookies from 'universal-cookie';\nimport Firebase from 'firebase'\nimport CardList from './CardList';\nimport config from './config';\n// import Instafeed from 'instafeed.js'\nconst cookies = new Cookies();\nconst signOut=(e)=>{\n    cookies.remove(\"auth\");\n    cookies.remove(\"user_id\");\n    window.location.replace(\"http://localhost:3000\");\n}\nclass Home extends Component{\n    constructor(){\n        super()\n        Firebase.initializeApp(config);\n        this.state={\n            username:'',\n            urls:[]\n        }\n    }\n    writeUserData = (data) => {\n        Firebase.database()\n          .ref(\"/\")\n          .set(data);\n        console.log(\"DATA SAVED\");\n      };\n    componentDidMount(){\n        this.writeUserData(\"hello\")\n        const urlx=[];\n        const usernameurl=`https://graph.instagram.com/`+cookies.get(\"user_id\")+\"?fields=username&access_token=\"+cookies.get(\"auth\");\n        fetch(usernameurl,{\n            method:'get'\n        }).then((res)=>res.json())\n        .then(data=>{\n            this.writeUserData(data.username)\n            // Firebase.database()\n            // .ref(\"/\")\n            // .push(data.username);\n            this.setState({\n                username:data.username\n            })\n        }).catch(err=>{\n            console.log(err)\n            alert(\"Reload Once to fix\")\n        })\n        const url=`https://graph.instagram.com/`+cookies.get(\"user_id\")+\"/media?access_token=\"+cookies.get(\"auth\");\n        fetch(url,{\n            method:'get'\n        }).then((res)=>res.json())\n        .then(data=>{\n            console.log(data.data)\n            \n            data.data.map(id=>{\n                const mediaUrl=`https://graph.instagram.com/`+id.id+`/?fields=media_url,caption&access_token=`+cookies.get(\"auth\");\n                fetch(mediaUrl,{\n                    method:'get'\n                }).then((r)=>r.json())\n                .then(rdata=>{\n                    this.setState({\n                        urls:[...this.state.urls,rdata]\n                    })\n                    Firebase.database()\n                    .ref(\"/\"+this.state.username)\n                    .push(rdata)\n                    \n                })\n\n            })          \n            \n        }).catch(err=>{\n            console.log(err)\n            \n        });\n        \n    }\n    \n    render(){\n        // console.log(cookies.get('auth'));\n        console.log(this.state.urls)\n        return(\n            <div>\n                <div className=\"banner\">\n                    <button onClick={signOut}className=\"btn btn-primary btn-lg pull-right\" style={{float:\"right\",marginRight:\"40px\",marginTop:\"40px\"}}>Sign Out</button>\n                </div>\n                <CardList feeds={this.state.urls}/>\n            </div>\n        )\n    }\n}\nexport default Home;","import React,{Component} from 'react';\nimport Firebase from 'firebase';\nimport config from '../config';\nimport Cookies from 'universal-cookie';\nimport CardList from '../CardList';\n\nconst cookies = new Cookies();\nconst signOut=(e)=>{\n    cookies.remove(\"auth\");\n    cookies.remove(\"user_id\");\n    window.location.replace(\"http://localhost:3000/\");\n}\n\nclass UserPage extends Component{\n    \n    constructor(){\n        super()\n        this.state={\n            username:'',\n            urls:[]\n        }\n        Firebase.initializeApp(config);\n    }\n    componentDidMount(){\n        let ref=Firebase.database().ref(\"/\"+this.props.match.params.id);\n        ref.on(\"value\",snapshot=>{\n            snapshot.forEach(url=>{\n                console.log(url.val().media_url);\n                this.setState({\n                    urls:[...this.state.urls,url.val()]\n                })\n            })\n            // console.group(state);\n        });\n    }\n    render(){\n        console.log(this.state.urls)\n        return(\n            <div>\n                <div className=\"banner\">\n                    <button onClick={signOut} className=\"btn btn-primary btn-lg pull-right\" style={{float:\"right\",marginRight:\"40px\",marginTop:\"40px\"}}>Home</button>\n                </div>\n                <CardList feeds={this.state.urls}/>\n            </div>\n        )\n    }\n}\nexport default UserPage;","import React,{Component} from 'react';\nimport {BrowserRouter as Router,Route,Link} from 'react-router-dom';\nimport Login from \"./Login\"\nimport './App.css';\nimport 'tachyons'\nimport Home from './Home';\nimport UserPage from './components/UserPage';\n\n\nclass App extends Component {\n  render(){\n    return (\n      <Router>\n        <Route exact path=\"/code/:id\" component={Login}/>\n        <Route exact path=\"/\" component={Login}/>\n        <Route exact path=\"/Home\" component={Home}/>\n        <Route exact path=\"/user/:id\" component={UserPage}/>\n      </Router>\n      \n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}